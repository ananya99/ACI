defaults:
  # Specify the config group (i.e. the class to instantiate this config as)
  - /MjCambrianConfig


  # Ordered such that subsequent defaults override self
  # - eval_env: eval_env
  - _self_

  - env: env
  - optional evo: null
  - trainer: trainer
  - hydra: hydra

  - required exp: "???"

  # Add optional tool configs here
  - optional tools: null

  # Here we override the default launcher and sweepers. Note that this only impacts
  # when multi-run is used. By default, we'll specify the local launcher (which is
  # based on submitit_local) and the evolution sweep. See those respective configs for
  # more information.
  - override /hydra/launcher: local
  - override /hydra/sweeper: evolution_nevergrad

logdir: ${path:logs,${now:%Y-%m-%d},${expname}}
expdir: ${path:${logdir},${expsubdir}}
expsubdir: "" # by default, the data will be stored in the logdir
expname: ${hydra_select:runtime.choices.exp}

seed: 0

# Not as easy as adding env@eval_env: ${env} to the defaults list because some required
# args are set in the downstream exp configs and these aren't carried over to eval_env
# when just loading the default env config. We use a utility function merge the config
# from downstream eval_env's into ${env} at instantiate rather than resolution. If we
# just set eval_env: ${env}, ${env} would resolve when these overrides are applied and
# any overrides of env in that config or downstream configs wouldn't be present in
# eval_env.
# NOTE: any overrides are independent of ${env}, like if there is a partial target in
# env, you also have to specify the _partial_ keyword in the eval_env config (if not,
# hydra will complain since it'll try instantiating the target fully). This is also the
# case with any targets, like you will need to specify the target in full if you
# override one here.
eval_env:
  _target_: cambrian.utils.config.utils.merge_with_kwargs
  config: ${env}

  # Define any ${env} interpolations used in subsequent configs expicitly here,
  # otherwise you'll get an interpolation error since eval_env isn't evaluated until
  # instantiation.
  n_eval_episodes: ${env.n_eval_episodes}

  save_filename: "eval"
