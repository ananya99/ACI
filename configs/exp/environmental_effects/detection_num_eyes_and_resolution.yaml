# @package _global_

# The goal of this experiment is to determine the effect of the environment as it
# relates to the number of eyes and resolution of each eye. In this specific exp,
# the task is detection. The intuition here is that high acuity vision is required
# in order to successfully complete the task. Thus, higher resolution vision should
# be selected for over higher number of eyes (relative to the navigation task). This
# trade off mechanism is implemented via the cheap constraints defined below which
# force the agent to optimize either resolution, number of eyes, or a mix of the two,
# though not both (like both can't be higher, either one is high or both are medium).

# The environment can be made more difficult by increasing custom.frequency. Options:
# 2, 4, 8, 20, 40, 60 (see models/assets/maze_textures)

# EXPECTATION:
# Over the course of evolution, resolution will be selected for rather than number of
# eyes

# SUCCESSFUL CONFIG:
# num_eyes_to_generate: [1, 3]
# resolution: [1, 20]
# frequency: 2

# num_eyes_to_generate: [1, 3]
# resolution: [1, 50]
# frequency: 8

# UNSUCCESSFUL CONFIG:
# num_eyes_to_generate: [1, 3]
# resolution: [1, 10]
# frequency: 2

defaults:
  - /exp/tasks/detection_with_textures@_here_

custom:
  # This sets both the frequency of the texture of the goal and adversary
  # The goal and adversary textures are the same, just rotated 90 degrees relative
  # to one another
  frequency: 2

trainer:
  total_timesteps: 500_000

env:
  animals:
    animal_0:
      num_eyes_to_generate: [1, 1]

      # The eyes can be placed anywhere anywhere from -90 to 90 degrees
      eyes_lon_range: [-20, 20]

      eyes:
        # Each eye while will have a resolution of 1x1 and a field of view of 10x10
        # Set the vertical resolution to equal the horizontal resolution for debugging
        # purposes.
        eye:
          resolution:
            - 1
            - ${.0}
          fov: [45, 45]

hydra:
  sweeper:
    params:
      # Just evolve the longitudinal number of eyes for now, i.e. flatland
      env.animals.animal_0.num_eyes_to_generate.1:
        init: 1
        lower: 1
        upper: 100
        step: 10
        integer: true
      # Add the resolution (width only) of the eyes to the sweeper
      env.animals.animal_0.eyes.eye.resolution.0:
        init: 1
        lower: 1
        upper: 100
        step: 10
        integer: true

    optim:
      # Add a cheap constraint to restrict the number of eyes generated to be
      # "morphologically feasible"
      cheap_constraints:
        - _target_: cambrian.ml.constraint_fns.nevergrad_constraint_fn
          _partial_: true
          fn: cambrian.ml.constraint_fns.constrain_morphologically_feasible_eyes
          num_lon_eyes_to_generate: env.animals.animal_0.num_eyes_to_generate.1
          width: env.animals.animal_0.eyes.eye.resolution.0
          lon_range: ${env.animals.animal_0.eyes_lon_range}
