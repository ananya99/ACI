# @package _global_
# We need to specify the package as _global_ so that hydra knows to place all the
# overridden configs defined here at the root of the config

defaults:
  # Here we define all the mazes we want to use in this experiment in a list.
  # Note the override keyword; this is necessary since we define this attribute as a
  # requirement in the default file listed above
  # Also note that you can't include the same maze twice; it will overwrite the previous
  # definition since the mazes attribute is a dictionary
  - /env/mazes/I_STATIC@env.mazes.I_STATIC
  - /env/mazes/I_STATIC@env.mazes.I_STATIC2

  # We also need to define the eyes for the animal. We'll use the default eye to serve
  # as the base for the new eye.
  # This basically says load "eye.yaml" in ./env/animals/eyes and place it at
  # env.animals.animal_0.eyes.eye_0/1 in the config
  - /env/animals/eyes@env.animals.animal_0.eyes.eye_0: ${env/animals/eyes}
  - /env/animals/eyes@env.animals.animal_0.eyes.eye_1: ${env/animals/eyes}

  # Define another eye that has optics
  - /env/animals/eyes/optics@env.animals.animal_0.eyes.eye_2
  - /env/animals/eyes/optics@env.animals.animal_0.eyes.eye_3

  # We then include the default config (located at in the same folder as this file
  # i.e. configs/exp/maze_exp.yaml). This file defines required attributes we'll need
  # to specify here to set things up correctly. This _must_ come after the above
  # includes because it defines default values for specific config files and the above
  # files use those as interpolations in their default lists.
  - maze_exp
  # Add a goal object
  - goal_exp

  # We define all the animals we want to use (in this case, just one)
  # We need to override the /env/animals field explicitly since we're changing the
  # default animal config
  - /env/animals@env.animals.animal_0: ${env/animals}
  - override /env/animals: point

  # Finally, we include _self_ such that all the configs defined herein will override
  # the files we've included above. This actually isn't necessary as hydra will
  # automatically append _self_ to the end of the list of defaults.
  - _self_

env:
  animals:
    animal_0:
      # Set the initial yaw to -pi / 4.
      initial_quat: ["${eval:'math.cos(-math.pi/4)'}", 0, 0, "${eval:'math.sin(-math.pi/4)'}"]

      eyes:
        eye_0:
          # Adjust the placement of both eyes so that they are looking in different
          # directions
          coord: [10, -25]
          resolution: [1, 2] # non-square resolution
        eye_1:
          # Override eye_1 to be high resolution
          resolution: [100, 100]
          coord: [10, 25]

        eye_2:
          coord: [10, 0]
          fov: [120, 80]
          resolution: [100, 100]

          noise_std: 0.25 # really noisy

        eye_3:
          coord: [10, 1]
          resolution: [100, 100]
          fov: [45, 15]

          aperture: 0.1

# This is an example of how to use the constant action wrapper
# NOTE: This is applied _after_ base.yaml, so the wrappers are appended after all
# previously defined wrappers
trainer:
  wrappers:
    constant_action_wrapper:
      _target_: cambrian.utils.wrappers.MjCambrianConstantActionWrapper
      _partial_: true
      constant_actions:
        0: -1.0
        1: -0.5
