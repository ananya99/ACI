# @package _global_

defaults:
  # - /env/mazes/Y_STATIC@env.mazes.Y_STATIC
  - /env/mazes/X_COMPLEX_STATIC@env.mazes.X_COMPLEX_STATIC

  # Adds a single goal to the environment
  # The intention for this exp config is that it's included in another exp config
  # NOTE: if used with a maze environment, there must be a reset localtion available for
  # the goal to be placed at.
  - /env/objects@env.objects.goal: goal

  # Use the maze_exp config as the base
  - /exp/maze_exp

  # Define one animal with one eye
  - /env/animals@env.animals.animal_0: ${env/animals}
  - /env/animals/eyes@env.animals.animal_0.eyes.eye: ${env/animals/eyes}

  # Override the default animal and eye configs to use the point and optics, respectively
  - override /env/animals: point
  - override /env/animals/eyes: optics

trainer:
  # decrease the number of timesteps to speed up the sweep
  total_timesteps: 1_000_000

env:
  reward_fn:
    euclidean_delta_from_init:
      _target_: cambrian.envs.reward_fns.euclidean_delta_from_init
      _partial_: true

  animals:
    animal_0:
      # Set the initial yaw to -pi / 4.
      init_quat:
        - ${eval:'math.cos(-math.pi/4)'}
        - 0
        - 0
        - ${eval:'math.sin(-math.pi/4)'}

      # Set the animal to be the optimal policy for the maze
      # trainable: false
      # instance:
      #   _target_: cambrian.animals.MjCambrianPointAnimalMazeOptimal
      #   _partial_: true
      #   target_object: goal

      num_eyes_to_generate: [1, 2]

      eyes:
        eye:
          resolution: [50, 50]
          fov: [100, 100]
          aperture: 1.0
          f_stop: 2.0
          refractive_index: 1.5
          noise_std: 0.1

hydra:
  sweeper:
    params:
      env.animals.animal_0.eyes.eye.height_map:
        init: ${env.animals.animal_0.eyes.eye.height_map}
        lower: 0.001
        upper: 1.0
