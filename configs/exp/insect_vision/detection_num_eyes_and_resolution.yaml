# @package _global_

defaults:
  # Use one maze for the time being
  - /env/mazes/SQUARE@env.mazes.SQUARE

  # Adds two objects to the environment: a goal and an adversarial object
  - /env/objects@env.objects.goal: goal
  - /env/objects@env.objects.adversary: adversary

  # Use the maze_exp config as the base
  - /exp/maze_exp

  # Define one animal
  - /env/animals@env.animals.animal_0: ${env/animals}
  - /env/animals/eyes@env.animals.animal_0.eyes.eye: ${env/animals/eyes}
  - override /env/animals: point

trainer:
  # decrease the number of timesteps to speed up the sweep
  total_timesteps: 300_000

env:
  reward_fn:
    euclidean_delta_from_init:
      factor: 0.0
    euclidean_delta_to_object:
      _target_: cambrian.envs.reward_fns.euclidean_delta_to_object
      _partial_: true
      factor: 0.25
      object: goal

  objects:
    goal:
      xml:
        overrides:
          - mujoco:
              - worldbody:
                  - body:
                      - name: ${parent:xml}_body
                      - childclass: object
                      - site:
                          - name: ${parent:xml}_site
                          - euler: "0 90 0"
              - asset:
                  - texture:
                      - name: "${parent:xml}_tex"
                      - builtin: "checker"
                      - rgb1: "0.8 0.2 0.2"
                      - rgb2: "0.2 0.2 0.8"
                      - height: "10"
                      - width: "10"
                      - type: "2d"
                  - material:
                      - name: ${parent:xml}_mat
                      - texture: "${parent:xml}_tex"
                      - texrepeat: "5 5"
                  - material:
                      - name: ${parent:xml}_top_mat
                      - rgba: 0.2 0.8 0.2 1.0
                      - emission: 1

    adversary:
      xml:
        overrides:
          - mujoco:
              - worldbody:
                  - body:
                      - name: ${parent:xml}_body
                      - childclass: object
                      - site:
                          - name: ${parent:xml}_site
                          - euler: "0 90 0"
              - asset:
                  - texture:
                      - name: "${parent:xml}_tex"
                      - builtin: "checker"
                      - rgb1: "0.8 0.2 0.2"
                      - rgb2: "0.2 0.2 0.8"
                      - height: "10"
                      - width: "10"
                      - type: "2d"
                  - material:
                      - name: ${parent:xml}_mat
                      - texture: "${parent:xml}_tex"
                      - texrepeat: "2 2"
                  - material:
                      - name: ${parent:xml}_top_mat
                      - rgba: 0.8 0.2 0.2 1.0
                      - emission: 1

  animals:
    animal_0:
      # Up the ctrl range to make the environment more difficult
      xml:
        overrides:
          - mujoco:
              - actuator:
                  - velocity:
                      - name: "act_x_${parent:xml}"
                      - ctrlrange: "-100.0 100.0"
                  - velocity:
                      - name: "act_y_${parent:xml}"
                      - ctrlrange: "-100.0 100.0"

      num_eyes_to_generate: [1, 1]

      # The eyes can be placed anywhere on the longitudinal axis
      eyes_lon_range: [-180, 180]

      eyes:
        # Each eye while will have a resolution of 1x1 and a field of view of 10x10
        eye:
          resolution: [1, 1]
          fov: [45, 45]

hydra:
  sweeper:
    parametrization:
      # Just evolve the longitudinal number of eyes for now, i.e. flatland
      env.animals.animal_0.num_eyes_to_generate.1:
        init: 1
        lower: 1
        upper: 100
        step: 5
        integer: true
      # Add the resolution of the eyes to the sweeper
      env.animals.animal_0.eyes.eye.resolution.0:
        init: 1
        lower: 1
        upper: 100
        step: 5
        integer: true
    cheap_constraints:
      - _target_: cambrian.ml.trainer.nevergrad_prune_fn
        _partial_: true
        parameters:
          num_lon_eyes_to_generate: env.animals.animal_0.num_eyes_to_generate.1
          width: env.animals.animal_0.eyes.eye.resolution.0
          lon_range: ${env.animals.animal_0.eyes_lon_range}
        fn: cambrian.envs.prune_fns.prune_anatomically_infeasible_eyes
