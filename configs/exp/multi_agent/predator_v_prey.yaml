# @package _global_

defaults:
  # Use one maze for the time being
  - /env/mazes/SQUARE@env.mazes.SQUARE

  # Use the maze_exp config as the base
  - /exp/maze_exp

  # Define two animals
  # The first will be the "predator" and is trainable
  - /env/animals@env.animals.predator: point
  - /env/animals/eyes@env.animals.predator.eyes.predator_eye_0: ${env/animals/eyes}
  - /env/animals/eyes@env.animals.predator.eyes.predator_eye_1: ${env/animals/eyes}
  # The second is the "prey" and is also trainable
  - /env/animals@env.animals.prey: point
  - /env/animals/eyes@env.animals.prey.eyes.prey_eye_0: ${env/animals/eyes}
  - /env/animals/eyes@env.animals.prey.eyes.prey_eye_1: ${env/animals/eyes}

trainer:
  total_timesteps: 1_000_000

env:
  # Set the reward fns
  reward_fn:
    predator_reward_if_prey_in_view:
      _target_: cambrian.envs.reward_fns.reward_if_animals_in_view
      _partial_: true

      # Reward the predator if the prey is in view
      from_animals: [predator]
      to_animals: [prey]
      for_animals: [predator]
      reward_in_view: 0.75
    prey_reward_if_predator_not_in_view:
      _target_: cambrian.envs.reward_fns.reward_if_animals_in_view
      _partial_: true

      # Reward the prey if the predator can't see it
      from_animals: [predator]
      to_animals: [prey]
      for_animals: [prey]
      reward_not_in_view: 0.75

  animals:
    predator:
      eyes:
        predator_eye_0:
          resolution: [20, 20]
          coord: [10, -25]
        predator_eye_1:
          resolution: [20, 20]
          coord: [10, 25]
    prey:
      eyes:
        prey_eye_0:
          resolution: [20, 20]
          coord: [10, -90]
          fov: [120, 10]
        prey_eye_1:
          resolution: [20, 20]
          coord: [10, 90]
          fov: [120, 10]
