# @package _global_

# This task includes a goal and adversary. The goal and adversary are textured. The
# derived config must send `custom.frequency` to the frequency of the texture
# that should be applied to the objects. By default, the textures are synchronized
# between the goal and adversary, but this can be overridden by setting
# env.agents.<object name>.custom.frequency directly for each object.

defaults:
  - /exp/tasks/task

  # Use one maze for the time being
  - /env/mazes@env.mazes.maze: OPEN

  # Use the maze_exp config as the base
  - /exp/maze_exp

  # Define one point agent with a single eye
  - /env/agents@env.agents.agent: point
  - /env/agents/eyes@env.agents.agent.eyes.eye: eye

  # Define two objects: a goal and an adversary
  - /env/agents@env.agents.adversary: object_sphere_textured_adversary
  - /env/agents@env.agents.goal: object_sphere_textured_goal

custom:
  # This sets both the frequency of the texture of the goal and adversary
  # The goal and adversary textures are the same, just rotated 90 degrees relative
  # to one another
  frequency: 20

trainer:
  total_timesteps: 500_000
  max_episode_steps: 256

env:
  agents:
    goal:
      custom:
        frequency: ${custom.frequency}
    adversary:
      custom:
        frequency: ${custom.frequency}

  mazes:
    maze:
      scale: 5
      agent_id_map:
        default: [agent]
        O: [goal, adversary]

  step_fn:
    # Respawn the goal if the agent is close to it
    # This subsequently means that agents which avoid the adversary more often are
    # far more likely to be selected for (i.e. they are better agents)
    respawn_objects_if_agent_close:
      _target_: cambrian.envs.step_fns.step_respawn_agents_if_close_to_agents
      _partial_: true
      for_agents: [goal, adversary]
      to_agents: [agent]
      distance_threshold: 1.0

  reward_fn:
    penalize_if_has_contacts:
      _target_: cambrian.envs.reward_fns.penalize_if_has_contacts
      _partial_: true
      penalty: -1.0
      for_agents: [agent]

    reward_euclidean_delta_to_goal:
      _target_: cambrian.envs.reward_fns.reward_euclidean_delta_to_agents
      _partial_: true
      factor: 0.25
      agents: [goal]

    reward_if_goal_respawned:
      _target_: cambrian.envs.reward_fns.reward_if_agents_respawned
      _partial_: true
      reward: 1.0
      for_agents: [goal]

    reward_if_adversary_respawned:
      _target_: cambrian.envs.reward_fns.reward_if_agents_respawned
      _partial_: true
      reward: -1.0
      for_agents: [adversary]

eval_env:
  reward_fn:
    reward_euclidean_delta_to_goal:
      # increase reward for moving closer to the goal
      factor: 2.5
    reward_if_goal_respawned:
      # large positive reward for respawning the goal (which happens if the agent is
      # close to it)
      reward: 10.0
    reward_if_adversary_respawned:
      # large negative reward for respawning the advsrary (which happens if the agent is
      # close to it)
      reward: -10.0
    penalize_if_has_contacts:
      # large negative reward for contacts
      penalty: -10.0
