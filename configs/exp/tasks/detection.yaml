# @package _global_

defaults:
  # Use one maze for the time being
  - /env/mazes/SQUARE_OPEN@env.mazes.SQUARE_OPEN

  # Adds two objects to the environment: a goal and an adversarial object
  - /env/objects@env.objects.goal: goal
  - /env/objects@env.objects.adversary: adversary

  # Use the maze_exp config as the base
  - /exp/maze_exp

  # Define one animal
  - /env/animals@env.animals.animal_0: ${env/animals}
  - /env/animals/eyes@env.animals.animal_0.eyes.eye: ${env/animals/eyes}
  - override /env/animals: point

env:
  reward_fn:
    exclusive_fn: reward_if_close_to_goal

    constant_penalty:
      _target_: cambrian.envs.reward_fns.constant_reward
      _partial_: true
      reward: -0.1

    # The agent is rewarded if it is close to the goal
    reward_euclidean_delta_to_goal:
      _target_: cambrian.envs.reward_fns.reward_euclidean_delta_to_objects
      _partial_: true
      factor: 1.0
      objects: [goal]
      only_best: true
      min_delta_threshold: 0.0 # don't give negative reward if the agent is moving away

    reward_if_close_to_goal:
      _target_: cambrian.envs.reward_fns.reward_if_close_to_object
      _partial_: true
      reward: 1.0
      objects: [goal]

    penalize_if_close_to_adversary:
      _target_: cambrian.envs.reward_fns.reward_if_close_to_object
      _partial_: true
      reward: -1.0
      objects: [adversary]

    # The agent is penalized if it is close to the adversary
    penalize_euclidean_delta_to_adversary:
      _target_: cambrian.envs.reward_fns.reward_euclidean_delta_to_objects
      _partial_: true
      factor: -1.0
      objects: [adversary]
      max_delta_threshold: 0.0 # don't give positive reward if the agent is moving away

    penalize_if_has_contacts:
      _target_: cambrian.envs.reward_fns.penalize_if_has_contacts
      _partial_: true
      penalty: -1.0

  truncation_fn:
    truncate_if_low_reward:
      _target_: cambrian.envs.truncation_fns.truncate_if_low_reward
      _partial_: true
      threshold: -50.0

    # Truncate (i.e. fail) if the agent is too close to the adversary
    truncate_if_close_to_adversary:
      _target_: cambrian.envs.truncation_fns.truncate_if_close_to_object
      _partial_: true
      objects: [adversary]
      distance_threshold: 2.0
    
  # termination_fn:
  #   # Terminate (i.e. succeed) if the agent is close to the goal
  #   terminate_if_close_to_goal:
  #     _target_: cambrian.envs.termination_fns.terminate_if_close_to_object
  #     _partial_: true
  #     objects: [goal]
  #     distance_threshold: 1.0