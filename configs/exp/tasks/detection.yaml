# @package _global_

# This task includes a goal and adversary. The goal and adversary are textured. The
# derived config must send `custom.frequency` to the frequency of the texture
# that should be applied to the objects. By default, the textures are synchronized
# between the goal and adversary, but this can be overridden by setting
# env.agents.<object name>.custom.frequency directly for each object.

defaults:
  - /exp/tasks/task

  # Use one maze for the time being
  - /env/mazes@env.mazes.maze: OPEN

  # Use the maze_exp config as the base
  - /exp/maze_exp

  # Define one point agent with a single eye
  - /env/agents@env.agents.agent: point
  - /env/agents/eyes@env.agents.agent.eyes.eye: eye

  # Define two objects: a goal and an adversary
  - /env/agents@env.agents.adversary0: object_sphere_textured_adversary
  - /env/agents@env.agents.adversary1: object_sphere_textured_adversary
  - /env/agents@env.agents.goal0: object_sphere_textured_goal
  - /env/agents@env.agents.goal1: object_sphere_textured_goal

custom:
  # This sets both the frequency of the texture of the goal and adversary
  # The goal and adversary textures are the same, just rotated 90 degrees relative
  # to one another
  frequency: 8

trainer:
  total_timesteps: 500_000
  max_episode_steps: 128

env:
  mazes:
    maze:
      scale: 2
      agent_id_map:
        default: [agent]
        O: ${glob:goal*|adversary*,${oc.dict.keys:env.agents}}

  reward_fn:
    reward_for_termination:
      for_agents: [agent]
      reward: 2.0
    reward_for_truncation:
      reward: -2.0
      for_agents: [agent]

    penalize_if_has_contacts:
      _target_: cambrian.envs.reward_fns.penalize_if_has_contacts
      _partial_: true
      penalty: -1.0
      for_agents: [agent]

    reward_euclidean_delta_to_goal:
      _target_: cambrian.envs.reward_fns.reward_euclidean_delta_to_agents
      _partial_: true
      factor: 0.25
      to_agents: ${glob:goal*,${oc.dict.keys:env.agents}}

  truncation_fn:
    truncate_if_close_to_adversary:
      _target_: cambrian.envs.done_fns.done_if_close_to_agents
      _partial_: true
      to_agents: ${glob:adversary*,${oc.dict.keys:env.agents}}
      distance_threshold: 1.0

  termination_fn:
    # Terminate (i.e. succeed) if the agent is close to the goal
    terminate_if_close_to_goal:
      _target_: cambrian.envs.done_fns.done_if_close_to_agents
      _partial_: true
      to_agents: ${glob:goal*,${oc.dict.keys:env.agents}}
      distance_threshold: 1.0

eval_env:
  reward_fn:
    reward_euclidean_delta_to_goal:
      # increase reward for moving closer to the goal
      factor: 0.01
    penalize_if_has_contacts:
      # large negative reward for contacts
      penalty: -2.0

    reward_for_truncation:
      # large negative reward for truncation
      reward: -10.0
    reward_for_termination:
      # large positive reward for termination; only happens when the agent makes it to
      # the end of the eval episode w/o being close to the adversary
      reward: 5.0
    reward_for_quick_termination:
      # large positive reward for quick termination
      reward: 5.0
