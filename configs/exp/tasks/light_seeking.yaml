# @package _global_

# This task includes a goal and adversary. The goal and adversary are textured. The
# derived config must send `custom.frequency` to the frequency of the texture
# that should be applied to the objects. By default, the textures are synchronized
# between the goal and adversary, but this can be overridden by setting
# env.agents.<object name>.custom.frequency directly for each object.

defaults:
  # Use one maze for the time being
  - /env/mazes@env.mazes.maze: OPEN

  # Use the maze_exp config as the base
  - /exp/maze_exp

  # Define one point agent with a single eye
  - /env/agents@env.agents.agent: point
  - /env/agents/eyes@env.agents.agent.eyes.eye: eye

  # Define one goal light object
  - /env/agents@env.agents.goal: object_sphere_light

trainer:
  total_timesteps: 300_000
  max_episode_steps: 128 # relatively short the episode length

env:
  mazes:
    maze:
      agent_id_map:
        default: [agent]
        O: [goal]

  reward_fn:
    penalize_if_has_contacts:
      _target_: cambrian.envs.reward_fns.penalize_if_has_contacts
      _partial_: true
      penalty: -1.0
      for_agents: [agent]

    reward_euclidean_delta_to_goal:
      _target_: cambrian.envs.reward_fns.reward_euclidean_delta_to_agents
      _partial_: true
      factor: 0.25
      agents: [goal]

    reward_for_termination:
      _target_: cambrian.envs.reward_fns.reward_for_termination
      _partial_: true
      reward: 5.0

    reward_for_truncation:
      _target_: cambrian.envs.reward_fns.reward_for_truncation
      _partial_: true
      reward: -10.0

  termination_fn:
    # Terminate (i.e. succeed) if the agent is close to the goal
    terminate_if_close_to_goal:
      _target_: cambrian.envs.done_fns.done_if_close_to_agents
      _partial_: true
      agents: [goal]
      distance_threshold: 1.0
