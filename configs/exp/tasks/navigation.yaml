# @package _global_

# This task is for navigation. It defines a set of mazes which the agent must navigate.
# The agent is rewarded based on it's movement from its initial position. The agent
# is penalized if it makes contact with the walls of the maze. A
# termination condition indicates success, and in this case, the agent is successful if
# it reaches the goal (within a certain distance threshold).

defaults:
  - /exp/tasks/task

  # Use one fairly complicated maze
  - /env/mazes@env.mazes.maze: COMPLEX

  # Use the maze_exp config as the base
  - /exp/maze_exp

  # Define one point agent with a single eye
  - /env/agents@env.agents.agent: point
  - /env/agents/eyes@env.agents.agent.eyes.eye: eye

  # Define one goal object
  - /env/agents@env.agents.goal: object_sphere_goal

trainer:
  total_timesteps: 300_000

env:
  agents:
    goal:
      custom:
        size: 0.25

    agent:
      # Set the initial yaw to -pi / 4.
      init_quat: ["${eval:'math.cos(-math.pi/4)'}", 0, 0, "${eval:'math.sin(-math.pi/4)'}"]


  # Update the scale of the maze so that it's more difficult
  mazes:
    maze:
      scale: 2.0

      agent_id_map:
        default: [agent]
        E: [agent]
        O: [goal]

  reward_fn:
    reward_for_termination:
      for_agents: [agent]
    reward_for_truncation:
      for_agents: [agent]

    euclidean_delta_from_init:
      _target_: cambrian.envs.reward_fns.euclidean_delta_from_init
      _partial_: true
      factor: 0.25

    penalize_if_has_contacts:
      _target_: cambrian.envs.reward_fns.penalize_if_has_contacts
      _partial_: true
      penalty: -1.0
      for_agents: [agent]

  truncation_fn:
    truncate_if_low_reward:
      _target_: cambrian.envs.done_fns.done_if_low_reward
      _partial_: true
      threshold: -50.0

  termination_fn:
    terminate_if_close_to_goal:
      _target_: cambrian.envs.done_fns.done_if_close_to_agents
      _partial_: true
      agents: [goal]
      distance_threshold: 1.0

eval_env:
  mazes:
    maze:
      agent_id_map:
        # Update the default map such that the agent is only placed on R:E spaces
        default: []
        E: [agent]
        O: [goal]

  reward_fn:
    reward_for_termination:
      # large positive reward for termination; only happens when the agent makes it to
      # the end of the eval episode w/o being close to the adversary
      reward: 20.0
    euclidean_delta_from_init:
      # increase reward for moving from the initial position
      factor: 2.5
    penalize_if_has_contacts:
      # large negative reward for contacts
      penalty: -10.0
      for_agents: [agent]

  truncation_fn:
    truncate_if_low_reward:
      threshold: -.inf
