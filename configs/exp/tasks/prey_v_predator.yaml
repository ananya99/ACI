# @package _global_

defaults:
  - /exp/tasks/task

  # Use one maze for the time being
  - /env/mazes@env.mazes.maze: OPEN

  # Use the maze_exp config as the base
  - /exp/maze_exp

  # Define two agents: a prey and an adversarial predator
  - /env/agents@env.agents.prey: point_textured
  - /env/agents/eyes@env.agents.prey.eyes.eye: eye
  - /env/agents@env.agents.predator: point_textured
  - /env/agents/eyes@env.agents.predator.eyes.eye: eye

custom:
  frequency: 8

trainer:
  total_timesteps: 2_000_000
  max_episode_steps: 256

  wrappers:
    constant_action_wrapper:
      # Set the forward velocity to be constant (i.e. at 50%) for both agents
      constant_actions:
        0: 0.0 # prey
        2: 0.0 # predator


env:
  mazes:
    maze:
      scale: 3
      agent_id_map:
        default: [predator, prey]
        O: [predator, prey]

  agents:
    prey:
      overlay_color: [0.2, 0.8, 0.2, 1]
      custom:
        frequency: ${custom.frequency}
        euler: 0 0 0
        top_rgba: 0.2 0.8 0.2 1.0

      num_eyes_to_generate: [1, 2]
      eyes_lon_range: [-90, 90]
      eyes:
        eye:
          fov: [120, 5]
          resolution: [10, 10]

    predator:
      overlay_color: [0.8, 0.2, 0.2, 1]
      custom:
        frequency: ${custom.frequency}
        euler: 0 90 0
        top_rgba: 0.8 0.2 0.2 1.0

      num_eyes_to_generate: [1, 2]
      eyes_lon_range: [-15, 15]
      eyes:
        eye:
          fov: [40, 5]
          resolution: [10, 10]

  reward_fn:
    penalize_if_has_contacts:
      _target_: cambrian.envs.reward_fns.penalize_if_has_contacts
      _partial_: true
      penalty: -1.0
      for_agents: [predator, prey]

    reward_euclidean_delta_to_prey:
      _target_: cambrian.envs.reward_fns.reward_euclidean_delta_to_agents
      _partial_: true
      factor: 0.25
      for_agents: [predator]
      to_agents: [prey]

    reward_euclidean_delta_away_from_predator:
      _target_: cambrian.envs.reward_fns.reward_euclidean_delta_to_agents
      _partial_: true
      factor: -0.25
      for_agents: [prey]
      to_agents: [predator]
