# @package _global_

# This task is for tracking of an object. It's similar to detection, but the object(s)
# are treated as 'animals' which move.

defaults:
  # Use one maze for the time being
  - /env/mazes/OPEN@env.mazes.OPEN

  # Adds two objects to the environment: a goal and an adversarial object
  - /env/objects@env.objects.goal: goal
  - /env/objects@env.objects.adversary0: adversary
  - /env/objects@env.objects.adversary1: adversary

  # Use the maze_exp config as the base
  - /exp/maze_exp

  # Define one animal which will be trainable
  - /env/animals@env.animals.animal_0: ${env/animals}
  - /env/animals/eyes@env.animals.animal_0.eyes.eye: ${env/animals/eyes}

  # Then define a second "animal" which is really the object to track
  # It has no eyes
  - /env/animals@env.animals.goal: point_random

  - override /env/animals: point

trainer:
  total_timesteps: 500_000
  max_episode_steps: 128 # shorten the episode length

env:
  reward_fn:
    penalize_if_has_contacts:
      _target_: cambrian.envs.reward_fns.penalize_if_has_contacts
      _partial_: true
      penalty: -1.0

    reward_euclidean_delta_to_object:
      _target_: cambrian.envs.reward_fns.reward_euclidean_delta_to_animals
      _partial_: true
      factor: 0.25
      animals: [goal]

    # Increase negative reward for an early exit (i.e. contact with adversary)
    reward_for_truncation:
      _target_: cambrian.envs.reward_fns.reward_for_truncation
      _partial_: true
      reward: -2.0

  truncation_fn:
    truncate_if_close_to_adversary:
      _target_: cambrian.envs.truncation_fns.truncate_if_close_to_object
      _partial_: true
      objects: [adversary0, adversary1]
      distance_threshold: 1.0
    
  termination_fn:
    # Terminate (i.e. succeed) if the agent is close to the goal
    terminate_if_close_to_goal:
      _target_: cambrian.envs.termination_fns.terminate_if_close_to_object
      _partial_: true
      objects: [goal]
      distance_threshold: 1.0