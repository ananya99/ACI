# @package _global_

# Update the seed based on the current generation and rank such that each agent's is unique
seed: |
  ${eval:'${trainer.n_envs} * (${custom.variables.generation} * 
  ${custom.variables.num_agents_per_node} * ${custom.variables.num_nodes} + 
  ${custom.variables.local_rank})'}

# Update the logdir to use the generation and rank syntax
logdir: ${path:${custom.variables.default_logdir},${custom.variables.rank_path}}

custom:
  variables:
    # Variable storage. We'll use the following variables in the actual config. Here,
    # we'll define the rank and generation that is defined during evolution in a slurm
    # environment. Essentially, the number of nodes represents the number of separate
    # array jobs that we launched, num agents is the number of individual tasks that are
    # run on each node, and the rank is the unique integer id of any one agent across all
    # agents and nodes. The generation is then calculated based on the number of updates
    # have been done by the sweeper.
    num_nodes: ${oc.env:SLURM_ARRAY_TASK_COUNT,1}
    num_agents_per_node: ${oc.env:SLURM_NTASKS,1}
    local_rank: ${oc.env:SLURM_PROCID,0}
    global_rank: ${eval:'${oc.env:SLURM_ARRAY_TASK_ID, 0} * ${.num_agents_per_node} + ${.local_rank}'}
    generation: ${eval:'int(((${hydra:job.num} or 0) - ${.global_rank}) / (${.num_agents_per_node} * ${.num_nodes}))'}
    rank_path: ${path:generation_${.generation},rank_${.global_rank}}