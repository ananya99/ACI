# @package _global_

defaults:
  # Use one maze for the time being
  - /env/mazes@env.mazes.maze: OPEN

  # Use the maze_task config as the base
  - maze_task

  # Define one point agent with a single eye
  - /env/agents@env.agents.agent: point
  - /env/agents/eyes@env.agents.agent.eyes.eye: multi_eye_approx

  # Define two objects: a goal
  - /env/agents@env.agents.goal: object_sphere_light

env:
  mazes:
    maze:
      scale: 2.0
      agent_id_map:
        default: ${glob:agent*,${oc.dict.keys:env.agents}}
        O: ${glob:goal*,${oc.dict.keys:env.agents}}

  reward_fn:
    reward_for_truncation:
      _target_: cambrian.envs.reward_fns.reward_for_truncation
      _partial_: true
      reward: -1.0
      for_agents: ${glob:agent*,${oc.dict.keys:env.agents}}

    reward_if_close_to_goal:
      _target_: cambrian.envs.reward_fns.reward_if_close_to_agents
      _partial_: true
      reward: 1.0
      for_agents: ${glob:agent*,${oc.dict.keys:env.agents}}
      to_agents: ${glob:goal*,${oc.dict.keys:env.agents}}
      distance_threshold: 1.0
      scale_by_quickness: True

    penalize_if_has_contacts:
      _target_: cambrian.envs.reward_fns.penalize_if_has_contacts
      _partial_: true
      penalty: -1.0
      for_agents: ${glob:agent*,${oc.dict.keys:env.agents}}

  termination_fn:
    # Terminate (i.e. succeed) if the agent is close to the goal
    terminate_if_close_to_goal:
      _target_: cambrian.envs.done_fns.done_if_close_to_agents
      _partial_: true
      to_agents: ${glob:goal*,${oc.dict.keys:env.agents}}
      distance_threshold: 1.0

eval_env:
  step_fn:
    # respawn the goal if the agent is close to it
    respawn_objects_if_agent_close:
      _target_: cambrian.envs.step_fns.step_respawn_agents_if_close_to_agents
      _partial_: true
      for_agents: ${glob:goal*,${oc.dict.keys:env.agents}}
      to_agents: ${glob:agent*,${oc.dict.keys:env.agents}}
      distance_threshold: 1.0

  reward_fn:
    reward_if_goal_respawned:
      _target_: cambrian.envs.reward_fns.reward_if_agents_respawned
      _partial_: true
      # large positive reward for respawning the goal (which happens if the agent is
      # close to it)
      reward: 10.0
      for_agents: ${glob:goal*,${oc.dict.keys:env.agents}}
      scale_by_quickness: true

    reward_if_close_to_goal:
      disable: True
    penalize_if_has_contacts:
      # large negative reward for contacts
      penalty: -2.0

  termination_fn:
    terminate_if_close_to_goal:
      disable: True
